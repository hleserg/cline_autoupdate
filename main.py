#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Cline
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ Cline –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ —É–ª—É—á—à–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
"""

import os
import json
import sys
import logging
from datetime import datetime
from pathlib import Path
import subprocess
import platform

from src.config_analyzer import ConfigAnalyzer
from src.rules_generator import RulesGenerator
from src.workflow_optimizer import WorkflowOptimizer
from src.performance_tracker import PerformanceTracker
from src.adaptive_settings import AdaptiveSettings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/cline_autoupdate.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class ClineAutoUpdater:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.config_analyzer = ConfigAnalyzer()
        self.rules_generator = RulesGenerator()
        self.workflow_optimizer = WorkflowOptimizer()
        self.performance_tracker = PerformanceTracker()
        self.adaptive_settings = AdaptiveSettings()
        
        # –ü—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º Cline
        self.setup_paths()
        
    def setup_paths(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Cline"""
        system = platform.system()
        if system == "Windows":
            self.vscode_config_path = Path.home() / "AppData/Roaming/Code/User"
        elif system == "Darwin":  # macOS
            self.vscode_config_path = Path.home() / "Library/Application Support/Code/User"
        else:  # Linux
            self.vscode_config_path = Path.home() / ".config/Code/User"
            
        self.cline_config_path = self.vscode_config_path / "globalStorage/saoudrizwan.claude-dev"
        self.workspace_path = Path.cwd()
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Cline")
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            current_config = self.config_analyzer.analyze_current_setup(
                self.cline_config_path, self.workspace_path
            )
            
            # 2. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_data = self.performance_tracker.collect_metrics()
            
            # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
            improved_rules = self.rules_generator.generate_improved_rules(
                current_config, performance_data
            )
            
            # 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è workflow
            optimized_workflows = self.workflow_optimizer.optimize_workflows(
                current_config, performance_data
            )
            
            # 5. –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            adaptive_config = self.adaptive_settings.generate_adaptive_config(
                current_config, performance_data
            )
            
            # 6. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
            self.apply_improvements(improved_rules, optimized_workflows, adaptive_config)
            
            # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            self.performance_tracker.save_session_data(performance_data)
            
            self.logger.info("‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            sys.exit(1)
            
    def apply_improvements(self, rules, workflows, config):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Cline"""
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .clinerules
        self.update_clinerules(rules)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ workflow —Ñ–∞–π–ª–æ–≤
        self.update_workflows(workflows)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ VS Code –¥–ª—è Cline
        self.update_vscode_settings(config)
        
        self.logger.info("üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
    def update_clinerules(self, rules):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .clinerules"""
        clinerules_path = self.workspace_path / ".clinerules"
        
        with open(clinerules_path, 'w', encoding='utf-8') as f:
            f.write(rules)
            
        self.logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª .clinerules")
        
    def update_workflows(self, workflows):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ workflow —Ñ–∞–π–ª–æ–≤"""
        workflows_dir = self.workspace_path / ".cline" / "workflows"
        workflows_dir.mkdir(parents=True, exist_ok=True)
        
        for workflow_name, workflow_content in workflows.items():
            workflow_path = workflows_dir / f"{workflow_name}.md"
            with open(workflow_path, 'w', encoding='utf-8') as f:
                f.write(workflow_content)
                
        self.logger.info(f"üìã –û–±–Ω–æ–≤–ª–µ–Ω—ã workflow —Ñ–∞–π–ª—ã: {list(workflows.keys())}")
        
    def update_vscode_settings(self, config):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ VS Code –¥–ª—è Cline"""
        settings_path = self.vscode_config_path / "settings.json"
        
        if settings_path.exists():
            with open(settings_path, 'r', encoding='utf-8') as f:
                settings = json.load(f)
        else:
            settings = {}
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Cline
        cline_settings = config.get('cline_settings', {})
        for key, value in cline_settings.items():
            settings[f"cline.{key}"] = value
            
        with open(settings_path, 'w', encoding='utf-8') as f:
            json.dump(settings, f, indent=2, ensure_ascii=False)
            
        self.logger.info("‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VS Code")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    os.makedirs('logs', exist_ok=True)
    os.makedirs('data', exist_ok=True)
    os.makedirs('templates', exist_ok=True)
    
    updater = ClineAutoUpdater()
    updater.run()

if __name__ == "__main__":
    main()
