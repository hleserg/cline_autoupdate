"""
–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã –∏ Cline
–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import json
import psutil
import time
import os
from pathlib import Path
from typing import Dict, List, Any, Optional
import logging
from datetime import datetime, timedelta

class PerformanceTracker:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.data_dir = Path('data')
        self.data_dir.mkdir(exist_ok=True)
        
    def collect_metrics(self) -> Dict[str, Any]:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        self.logger.info("üìà –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        metrics = {
            'timestamp': time.time(),
            'system_metrics': self._collect_system_metrics(),
            'process_metrics': self._collect_process_metrics(),
            'disk_metrics': self._collect_disk_metrics(),
            'memory_patterns': self._analyze_memory_patterns(),
            'performance_issues': self._identify_performance_issues(),
            'historical_data': self._load_historical_data(),
            'session_info': self._get_session_info()
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π
        metrics['trends'] = self._analyze_trends(metrics)
        
        self.logger.info("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–Ω—ã")
        
        return metrics
        
    def save_session_data(self, performance_data: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏"""
        
        session_file = self.data_dir / f"session_{int(time.time())}.json"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        session_data = {
            'timestamp': performance_data['timestamp'],
            'system_metrics': performance_data['system_metrics'],
            'process_metrics': performance_data['process_metrics'],
            'performance_issues': performance_data['performance_issues'],
            'session_info': performance_data['session_info']
        }
        
        try:
            with open(session_file, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, indent=2, ensure_ascii=False)
                
            self.logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {session_file}")
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            self._cleanup_old_data()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏: {e}")
            
    def _collect_system_metrics(self) -> Dict[str, Any]:
        """–°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            # –ú–µ—Ç—Ä–∏–∫–∏ CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            cpu_count = psutil.cpu_count()
            cpu_freq = psutil.cpu_freq()
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            swap = psutil.swap_memory()
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –¥–∏—Å–∫–∞
            disk_usage = psutil.disk_usage('/')
            disk_io = psutil.disk_io_counters()
            
            # –°–µ—Ç–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            network_io = psutil.net_io_counters()
            
            return {
                'cpu': {
                    'percent': cpu_percent,
                    'count': cpu_count,
                    'frequency': {
                        'current': cpu_freq.current if cpu_freq else None,
                        'min': cpu_freq.min if cpu_freq else None,
                        'max': cpu_freq.max if cpu_freq else None
                    }
                },
                'memory': {
                    'total': memory.total,
                    'available': memory.available,
                    'percent': memory.percent,
                    'used': memory.used,
                    'free': memory.free
                },
                'swap': {
                    'total': swap.total,
                    'used': swap.used,
                    'free': swap.free,
                    'percent': swap.percent
                },
                'disk': {
                    'total': disk_usage.total,
                    'used': disk_usage.used,
                    'free': disk_usage.free,
                    'percent': (disk_usage.used / disk_usage.total) * 100
                },
                'disk_io': {
                    'read_bytes': disk_io.read_bytes if disk_io else 0,
                    'write_bytes': disk_io.write_bytes if disk_io else 0,
                    'read_count': disk_io.read_count if disk_io else 0,
                    'write_count': disk_io.write_count if disk_io else 0
                },
                'network': {
                    'bytes_sent': network_io.bytes_sent,
                    'bytes_recv': network_io.bytes_recv,
                    'packets_sent': network_io.packets_sent,
                    'packets_recv': network_io.packets_recv
                }
            }
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            return {}
            
    def _collect_process_metrics(self) -> Dict[str, Any]:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        try:
            current_process = psutil.Process()
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            process_info = {
                'pid': current_process.pid,
                'name': current_process.name(),
                'cpu_percent': current_process.cpu_percent(),
                'memory_info': current_process.memory_info()._asdict(),
                'memory_percent': current_process.memory_percent(),
                'num_threads': current_process.num_threads(),
                'create_time': current_process.create_time()
            }
            
            # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ VS Code
            vscode_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                try:
                    if 'code' in proc.info['name'].lower():
                        vscode_processes.append(proc.info)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
                    
            return {
                'current_process': process_info,
                'vscode_processes': vscode_processes,
                'total_processes': len(list(psutil.process_iter())),
                'system_load': os.getloadavg() if hasattr(os, 'getloadavg') else None
            }
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            return {}
            
    def _collect_disk_metrics(self) -> Dict[str, Any]:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        try:
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            workspace_path = Path.cwd()
            workspace_size = self._get_directory_size(workspace_path)
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            temp_dirs = [Path.home() / 'AppData/Local/Temp', Path('/tmp')]
            temp_usage = 0
            
            for temp_dir in temp_dirs:
                if temp_dir.exists():
                    temp_usage += self._get_directory_size(temp_dir)
                    
            return {
                'workspace_size': workspace_size,
                'temp_usage': temp_usage,
                'large_files': self._find_large_files(workspace_path),
                'cache_usage': self._estimate_cache_usage()
            }
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –¥–∏—Å–∫–∞: {e}")
            return {}
            
    def _analyze_memory_patterns(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            memory_samples = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            for _ in range(5):
                memory = psutil.virtual_memory()
                memory_samples.append({
                    'timestamp': time.time(),
                    'percent': memory.percent,
                    'available': memory.available,
                    'used': memory.used
                })
                time.sleep(0.5)
                
            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π
            if len(memory_samples) > 1:
                start_usage = memory_samples[0]['percent']
                end_usage = memory_samples[-1]['percent']
                trend = 'increasing' if end_usage > start_usage else 'decreasing'
            else:
                trend = 'stable'
                
            avg_usage = sum(sample['percent'] for sample in memory_samples) / len(memory_samples)
            
            return {
                'samples': memory_samples,
                'trend': trend,
                'average_usage': avg_usage,
                'peak_usage': max(sample['percent'] for sample in memory_samples),
                'min_usage': min(sample['percent'] for sample in memory_samples)
            }
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏: {e}")
            return {}
            
    def _identify_performance_issues(self) -> List[Dict[str, Any]]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            if cpu_percent > 80:
                issues.append({
                    'type': 'cpu',
                    'severity': 'high' if cpu_percent > 90 else 'medium',
                    'value': cpu_percent,
                    'description': f'–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent:.1f}%',
                    'recommendation': '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á'
                })
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            if memory.percent > 80:
                issues.append({
                    'type': 'memory',
                    'severity': 'high' if memory.percent > 90 else 'medium',
                    'value': memory.percent,
                    'description': f'–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent:.1f}%',
                    'recommendation': '–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö'
                })
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            disk = psutil.disk_usage('/')
            disk_percent = (disk.used / disk.total) * 100
            if disk_percent > 85:
                issues.append({
                    'type': 'disk',
                    'severity': 'high' if disk_percent > 95 else 'medium',
                    'value': disk_percent,
                    'description': f'–ù–∏–∑–∫–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: {disk_percent:.1f}% –∑–∞–Ω—è—Ç–æ',
                    'recommendation': '–û—á–∏—Å—Ç–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∫–µ—à–∏'
                })
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ swap –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            swap = psutil.swap_memory()
            if swap.percent > 50:
                issues.append({
                    'type': 'swap',
                    'severity': 'medium',
                    'value': swap.percent,
                    'description': f'–ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ swap: {swap.percent:.1f}%',
                    'recommendation': '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ RAM'
                })
                
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            
        return issues
        
    def _load_historical_data(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        historical_data = []
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            cutoff_time = time.time() - (7 * 24 * 3600)
            
            for session_file in self.data_dir.glob('session_*.json'):
                try:
                    with open(session_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        
                    if data.get('timestamp', 0) > cutoff_time:
                        historical_data.append(data)
                        
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {session_file}: {e}")
                    
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            
        return historical_data
        
    def _get_session_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""
        return {
            'start_time': time.time(),
            'working_directory': str(Path.cwd()),
            'python_version': f"{psutil.version_info}",
            'platform': psutil.LINUX or psutil.WINDOWS or psutil.MACOS,
            'boot_time': psutil.boot_time()
        }
        
    def _analyze_trends(self, metrics: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        trends = {}
        
        try:
            historical_data = metrics.get('historical_data', [])
            
            if len(historical_data) < 2:
                return trends
                
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
            cpu_values = [data['system_metrics']['cpu']['percent'] 
                         for data in historical_data 
                         if 'system_metrics' in data and 'cpu' in data['system_metrics']]
                         
            if len(cpu_values) > 1:
                trends['cpu_trend'] = 'increasing' if cpu_values[-1] > cpu_values[0] else 'decreasing'
                trends['avg_cpu'] = sum(cpu_values) / len(cpu_values)
                
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            memory_values = [data['system_metrics']['memory']['percent'] 
                           for data in historical_data 
                           if 'system_metrics' in data and 'memory' in data['system_metrics']]
                           
            if len(memory_values) > 1:
                trends['memory_trend'] = 'increasing' if memory_values[-1] > memory_values[0] else 'decreasing'
                trends['avg_memory'] = sum(memory_values) / len(memory_values)
                
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            
        return trends
        
    def _get_directory_size(self, path: Path) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            total_size = 0
            for file_path in path.rglob('*'):
                if file_path.is_file():
                    total_size += file_path.stat().st_size
            return total_size
        except Exception:
            return 0
            
    def _find_large_files(self, path: Path, size_limit: int = 100 * 1024 * 1024) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        large_files = []
        
        try:
            for file_path in path.rglob('*'):
                if file_path.is_file():
                    size = file_path.stat().st_size
                    if size > size_limit:
                        large_files.append({
                            'path': str(file_path),
                            'size': size,
                            'size_mb': round(size / (1024 * 1024), 2)
                        })
                        
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            
        return large_files
        
    def _estimate_cache_usage(self) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–µ—à–∞"""
        cache_info = {}
        
        try:
            # VS Code cache
            vscode_cache_paths = [
                Path.home() / 'AppData/Roaming/Code/User/workspaceStorage',
                Path.home() / '.config/Code/User/workspaceStorage',
                Path.home() / 'Library/Application Support/Code/User/workspaceStorage'
            ]
            
            total_cache = 0
            for cache_path in vscode_cache_paths:
                if cache_path.exists():
                    size = self._get_directory_size(cache_path)
                    total_cache += size
                    cache_info[str(cache_path)] = size
                    
            cache_info['total_vscode_cache'] = total_cache
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–µ—à–∞: {e}")
            
        return cache_info
        
    def _cleanup_old_data(self, days_to_keep: int = 30) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            cutoff_time = time.time() - (days_to_keep * 24 * 3600)
            
            for session_file in self.data_dir.glob('session_*.json'):
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    timestamp = int(session_file.stem.split('_')[1])
                    
                    if timestamp < cutoff_time:
                        session_file.unlink()
                        self.logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {session_file}")
                        
                except (ValueError, IndexError):
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å timestamp, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if session_file.stat().st_mtime < cutoff_time:
                        session_file.unlink()
                        self.logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {session_file}")
                        
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
