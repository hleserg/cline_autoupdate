"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è .clinerules
–°–æ–∑–¥–∞–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import json
from pathlib import Path
from typing import Dict, List, Any, Set
import logging
from datetime import datetime

class RulesGenerator:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.base_rules = {
            'general': [
                "–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–µ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤",
                "–î–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏",
                "–°–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                "–ò–∑–±–µ–≥–∞–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ (DRY –ø—Ä–∏–Ω—Ü–∏–ø)",
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–º–µ—Å—Ç–æ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª"
            ],
            'security': [
                "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö—Ä–∞–Ω–∏ –ø–∞—Ä–æ–ª–∏ –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ –∫–æ–¥–µ",
                "–í—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–∏—Ä—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥",
                "–ò—Å–ø–æ–ª—å–∑—É–π HTTPS –¥–ª—è –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                "–õ–æ–≥–∏—Ä—É–π —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "–ü—Ä–∏–º–µ–Ω—è–π –ø—Ä–∏–Ω—Ü–∏–ø –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π"
            ],
            'performance': [
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Ü–∏–∫–ª—ã –∏ –∏–∑–±–µ–≥–∞–π –∏–∑–ª–∏—à–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                "–ü—Ä–∏–º–µ–Ω—è–π –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ",
                "–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                "–ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–π –∫–æ–¥ –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞"
            ],
            'testing': [
                "–ü–∏—à–∏ unit-—Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤",
                "–°—Ç—Ä–µ–º–∏—Å—å –∫ –ø–æ–∫—Ä—ã—Ç–∏—é —Ç–µ—Å—Ç–∞–º–∏ –Ω–µ –º–µ–Ω–µ–µ 80%",
                "–ò—Å–ø–æ–ª—å–∑—É–π –º–æ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                "–ì—Ä—É–ø–ø–∏—Ä—É–π —Ç–µ—Å—Ç—ã –ª–æ–≥–∏—á–µ—Å–∫–∏ –ø–æ –º–æ–¥—É–ª—è–º",
                "–¢–µ—Å—Ç–∏—Ä—É–π –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ—à–∏–±–∫–∏"
            ],
            'documentation': [
                "–ü–∏—à–∏ docstrings –¥–ª—è –≤—Å–µ—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤",
                "–û–±–Ω–æ–≤–ª—è–π README.md –ø—Ä–∏ –∑–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö",
                "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π API endpoints —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏",
                "–í–µ–¥–∏ changelog –¥–ª—è —Ä–µ–ª–∏–∑–æ–≤",
                "–î–æ–±–∞–≤–ª—è–π –∏–Ω–ª–∞–π–Ω-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –Ω–µ–æ—á–µ–≤–∏–¥–Ω–æ–≥–æ –∫–æ–¥–∞"
            ]
        }
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        self.language_specific_rules = {
            'python': [
                "–°–ª–µ–¥—É–π PEP 8 –¥–ª—è —Å—Ç–∏–ª—è –∫–æ–¥–∞",
                "–ò—Å–ø–æ–ª—å–∑—É–π type hints –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–ü—Ä–∏–º–µ–Ω—è–π list/dict comprehensions –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ",
                "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ, –∏–∑–±–µ–≥–∞–π –≥–æ–ª–æ–≥–æ except",
                "–ò—Å–ø–æ–ª—å–∑—É–π f-strings –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫",
                "–ü—Ä–∏–º–µ–Ω—è–π dataclasses –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö",
                "–ò—Å–ø–æ–ª—å–∑—É–π pathlib –≤–º–µ—Å—Ç–æ os.path –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏"
            ],
            'javascript': [
                "–ò—Å–ø–æ–ª—å–∑—É–π const/let –≤–º–µ—Å—Ç–æ var",
                "–ü—Ä–∏–º–µ–Ω—è–π —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º 'use strict'",
                "–ò—Å–ø–æ–ª—å–∑—É–π async/await –≤–º–µ—Å—Ç–æ –ø—Ä–æ–º–∏—Å–æ–≤ –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ",
                "–ü—Ä–∏–º–µ–Ω—è–π –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –º–∞—Å—Å–∏–≤–æ–≤",
                "–ò—Å–ø–æ–ª—å–∑—É–π –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É ES6",
                "–ü—Ä–æ–≤–µ—Ä—è–π —Ç–∏–ø—ã —Å –ø–æ–º–æ—â—å—é TypeScript –∏–ª–∏ JSDoc"
            ],
            'typescript': [
                "–í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π —Ç–∏–ø—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
                "–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö",
                "–ü—Ä–∏–º–µ–Ω—è–π generic —Ç–∏–ø—ã –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞",
                "–ò–∑–±–µ–≥–∞–π any —Ç–∏–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–π unknown –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ",
                "–ò—Å–ø–æ–ª—å–∑—É–π enum –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π",
                "–ü—Ä–∏–º–µ–Ω—è–π strict —Ä–µ–∂–∏–º –≤ tsconfig.json"
            ],
            'java': [
                "–°–ª–µ–¥—É–π —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º –ø–æ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—é Java",
                "–ò—Å–ø–æ–ª—å–∑—É–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö",
                "–ü—Ä–∏–º–µ–Ω—è–π Stream API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π",
                "–ò—Å–ø–æ–ª—å–∑—É–π Optional –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å null",
                "–°–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–ü—Ä–∏–º–µ–Ω—è–π –ø–∞—Ç—Ç–µ—Ä–Ω Builder –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"
            ],
            'rust': [
                "–ò—Å–ø–æ–ª—å–∑—É–π Result<T, E> –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫",
                "–ü—Ä–∏–º–µ–Ω—è–π match –¥–ª—è pattern matching",
                "–ò–∑–±–µ–≥–∞–π –ø–∞–Ω–∏–∫–∏ (panic!) –≤ –±–∏–±–ª–∏–æ—Ç–µ—á–Ω–æ–º –∫–æ–¥–µ",
                "–ò—Å–ø–æ–ª—å–∑—É–π References –∏ Borrowing –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                "–ü—Ä–∏–º–µ–Ω—è–π —Ç—Ä–µ–π—Ç—ã –¥–ª—è –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞",
                "–°–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º zero-cost abstractions"
            ]
        }
        
        # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
        self.framework_rules = {
            'react': [
                "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ö—É–∫–∞–º–∏",
                "–ü—Ä–∏–º–µ–Ω—è–π useCallback –∏ useMemo –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
                "–°–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø—É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
                "–ò—Å–ø–æ–ª—å–∑—É–π prop-types –∏–ª–∏ TypeScript –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏",
                "–ü—Ä–∏–º–µ–Ω—è–π —É—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ"
            ],
            'django': [
                "–ò—Å–ø–æ–ª—å–∑—É–π Django ORM –≤–º–µ—Å—Ç–æ —Å—ã—Ä–æ–≥–æ SQL",
                "–ü—Ä–∏–º–µ–Ω—è–π –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã –ë–î",
                "–ò—Å–ø–æ–ª—å–∑—É–π Django Forms –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                "–ü—Ä–∏–º–µ–Ω—è–π middleware –¥–ª—è –∫—Ä–æ—Å—Å-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á",
                "–°–ª–µ–¥—É–π MTV –ø–∞—Ç—Ç–µ—Ä–Ω—É Django"
            ],
            'flask': [
                "–ò—Å–ø–æ–ª—å–∑—É–π Blueprints –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "–ü—Ä–∏–º–µ–Ω—è–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π Flask-SQLAlchemy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î",
                "–í–∞–ª–∏–¥–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Marshmallow –∏–ª–∏ WTForms",
                "–ü—Ä–∏–º–µ–Ω—è–π application factory pattern"
            ]
        }
        
    def generate_improved_rules(self, config_data: Dict[str, Any], performance_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        self.logger.info("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª .clinerules")
        
        selected_rules = []
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª
        selected_rules.extend(self._select_base_rules(config_data, performance_data))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –¥–ª—è —è–∑—ã–∫–æ–≤
        selected_rules.extend(self._select_language_rules(config_data))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
        selected_rules.extend(self._select_framework_rules(config_data))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        selected_rules.extend(self._generate_adaptive_rules(performance_data))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        selected_rules.extend(self._preserve_custom_rules(config_data))
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—Ä–∞–≤–∏–ª
        selected_rules = self._remove_duplicates(selected_rules)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        selected_rules = self._prioritize_rules(selected_rules, config_data)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ .clinerules
        rules_content = self._format_rules_file(selected_rules, config_data)
        
        self.logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(selected_rules)} –ø—Ä–∞–≤–∏–ª")
        
        return rules_content
        
    def _select_base_rules(self, config_data: Dict[str, Any], performance_data: Dict[str, Any]) -> List[str]:
        """–í—ã–±–æ—Ä –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª"""
        selected = []
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        selected.extend(self.base_rules['general'][:3])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–µ–±-–ø—Ä–æ–µ–∫—Ç–æ–≤
        if self._is_web_project(config_data):
            selected.extend(self.base_rules['security'][:3])
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–æ–±–ª–µ–º
        performance_issues = performance_data.get('performance_issues', [])
        if performance_issues:
            selected.extend(self.base_rules['performance'][:2])
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        if self._has_tests(config_data):
            selected.extend(self.base_rules['testing'][:3])
        else:
            selected.append("–°–æ–∑–¥–∞–≤–∞–π —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        selected.extend(self.base_rules['documentation'][:2])
        
        return selected
        
    def _select_language_rules(self, config_data: Dict[str, Any]) -> List[str]:
        """–í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        selected = []
        
        languages = config_data.get('project_structure', {}).get('languages', [])
        
        for language in languages:
            if language in self.language_specific_rules:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 4-5 –ø—Ä–∞–≤–∏–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
                lang_rules = self.language_specific_rules[language][:5]
                selected.extend(lang_rules)
                
        return selected
        
    def _select_framework_rules(self, config_data: Dict[str, Any]) -> List[str]:
        """–í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤"""
        selected = []
        
        frameworks = config_data.get('project_structure', {}).get('frameworks', [])
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        detected_frameworks = self._detect_specific_frameworks(config_data)
        frameworks.extend(detected_frameworks)
        
        for framework in frameworks:
            if framework in self.framework_rules:
                framework_rules = self.framework_rules[framework][:3]
                selected.extend(framework_rules)
                
        return selected
        
    def _generate_adaptive_rules(self, performance_data: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        adaptive_rules = []
        
        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_issues = performance_data.get('performance_issues', [])
        
        for issue in perf_issues:
            if issue['type'] == 'memory':
                adaptive_rules.extend([
                    "–û—Å–≤–æ–±–æ–∂–¥–∞–π –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∑–∞–∫—Ä—ã–≤–∞–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
                    "–ò—Å–ø–æ–ª—å–∑—É–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
                    "–ú–æ–Ω–∏—Ç–æ—Ä—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç—è—Ö –∫–æ–¥–∞"
                ])
            elif issue['type'] == 'cpu':
                adaptive_rules.extend([
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å –≤—ã—Å–æ–∫–æ–π –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é",
                    "–ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á",
                    "–ö–µ—à–∏—Äy–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"
                ])
                
        # –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫
        error_patterns = performance_data.get('error_patterns', [])
        if error_patterns:
            adaptive_rules.append("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –∏—Ö")
            
        return adaptive_rules
        
    def _preserve_custom_rules(self, config_data: Dict[str, Any]) -> List[str]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        custom_rules = []
        
        current_rules = config_data.get('current_rules', {})
        if current_rules.get('exists') and current_rules.get('content'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ (—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –±–∞–∑–æ–≤—ã–º–∏)
            existing_content = current_rules['content']
            
            for line in existing_content.split('\n'):
                line = line.strip()
                if line and not line.startswith('#') and self._is_custom_rule(line):
                    custom_rules.append(line)
                    
        return custom_rules
        
    def _remove_duplicates(self, rules: List[str]) -> List[str]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—Ä–∞–≤–∏–ª"""
        seen = set()
        unique_rules = []
        
        for rule in rules:
            rule_lower = rule.lower().strip()
            if rule_lower not in seen:
                seen.add(rule_lower)
                unique_rules.append(rule)
                
        return unique_rules
        
    def _prioritize_rules(self, rules: List[str], config_data: Dict[str, Any]) -> List[str]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        
        def rule_priority(rule: str) -> int:
            rule_lower = rule.lower()
            
            # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            if any(keyword in rule_lower for keyword in ['security', '–ø–∞—Ä–æ–ª—å', '–∫–ª—é—á', 'auth']):
                return 1
                
            # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
            if any(keyword in rule_lower for keyword in ['test', '—Ç–µ—Å—Ç', '–∫–∞—á–µ—Å—Ç–≤–æ']):
                return 2
                
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if any(keyword in rule_lower for keyword in ['performance', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–æ–ø—Ç–∏–º–∏–∑']):
                return 3
                
            # –°—Ç–∏–ª—å –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            if any(keyword in rule_lower for keyword in ['style', '—Å—Ç–∏–ª—å', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä', '–¥–æ–∫—É–º–µ–Ω—Ç']):
                return 4
                
            # –û—Å—Ç–∞–ª—å–Ω–æ–µ
            return 5
            
        return sorted(rules, key=rule_priority)
        
    def _format_rules_file(self, rules: List[str], config_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ .clinerules"""
        
        lines = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        lines.append("# –ü—Ä–∞–≤–∏–ª–∞ Cline –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
        lines.append(f"# –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        lines.append("")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        project_info = config_data.get('project_structure', {})
        if project_info.get('project_type') != 'unknown':
            lines.append(f"# –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {project_info['project_type']}")
            
        if project_info.get('languages'):
            lines.append(f"# –Ø–∑—ã–∫–∏: {', '.join(project_info['languages'])}")
            
        if project_info.get('frameworks'):
            lines.append(f"# –§—Ä–µ–π–º–≤–æ—Ä–∫–∏: {', '.join(project_info['frameworks'])}")
            
        lines.append("")
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': [],
            '–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞': [],
            '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': [],
            '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': [],
            '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è': [],
            '–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞': []
        }
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª
        for rule in rules:
            rule_lower = rule.lower()
            
            if any(keyword in rule_lower for keyword in ['security', '–±–µ–∑–æ–ø–∞—Å', '–ø–∞—Ä–æ–ª—å', '–∫–ª—é—á']):
                categories['–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'].append(rule)
            elif any(keyword in rule_lower for keyword in ['test', '—Ç–µ—Å—Ç']):
                categories['–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'].append(rule)
            elif any(keyword in rule_lower for keyword in ['performance', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–æ–ø—Ç–∏–º–∏–∑']):
                categories['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'].append(rule)
            elif any(keyword in rule_lower for keyword in ['doc', '–¥–æ–∫—É–º–µ–Ω—Ç', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä']):
                categories['–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'].append(rule)
            elif any(keyword in rule_lower for keyword in ['style', '—Å—Ç–∏–ª—å', 'format', '–∫–∞—á–µ—Å—Ç–≤–æ']):
                categories['–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞'].append(rule)
            else:
                categories['–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞'].append(rule)
                
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category_name, category_rules in categories.items():
            if category_rules:
                lines.append(f"## {category_name}")
                lines.append("")
                for rule in category_rules:
                    lines.append(f"- {rule}")
                lines.append("")
                
        return '\n'.join(lines)
        
    def _is_web_project(self, config_data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–µ–∫—Ç –≤–µ–±-–ø—Ä–æ–µ–∫—Ç–æ–º"""
        project_structure = config_data.get('project_structure', {})
        
        languages = project_structure.get('languages', [])
        frameworks = project_structure.get('frameworks', [])
        
        web_indicators = ['javascript', 'typescript', 'nodejs', 'react', 'vue', 'angular']
        
        return any(indicator in languages + frameworks for indicator in web_indicators)
        
    def _has_tests(self, config_data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ—Å—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        project_structure = config_data.get('project_structure', {})
        file_counts = project_structure.get('file_counts', {})
        
        # –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º –∏ –∏–º–µ–Ω–∞–º
        test_indicators = ['.test.', '.spec.', '_test.', 'test_', 'tests/']
        
        for file_pattern in file_counts.keys():
            if any(indicator in file_pattern for indicator in test_indicators):
                return True
                
        return False
        
    def _detect_specific_frameworks(self, config_data: Dict[str, Any]) -> List[str]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤"""
        detected = []
        
        # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
        # –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        return detected
        
    def _is_custom_rule(self, rule: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –±–∞–∑–æ–≤—ã–º–∏
        all_base_rules = []
        
        for category_rules in self.base_rules.values():
            all_base_rules.extend(category_rules)
            
        for lang_rules in self.language_specific_rules.values():
            all_base_rules.extend(lang_rules)
            
        for framework_rules in self.framework_rules.values():
            all_base_rules.extend(framework_rules)
            
        rule_lower = rule.lower().strip()
        
        for base_rule in all_base_rules:
            if rule_lower == base_rule.lower().strip():
                return False
                
        return True
